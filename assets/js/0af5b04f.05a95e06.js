"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[273],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,g=p["".concat(r,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=p;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2268:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return r},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],l={sidebar_position:3,sidebar_label:"Schools Data"},r="Zed and Schools Data",d={unversionedId:"tutorials/schools",id:"version-v1.1.0/tutorials/schools",title:"Zed and Schools Data",description:"This document provides a beginner's overview of the Zed language",source:"@site/versioned_docs/version-v1.1.0/tutorials/schools.md",sourceDirName:"tutorials",slug:"/tutorials/schools",permalink:"/docs/v1.1.0/tutorials/schools",tags:[],version:"v1.1.0",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Schools Data"},sidebar:"tutorialSidebar",previous:{title:"Join",permalink:"/docs/v1.1.0/tutorials/join"},next:{title:"The Zed Language",permalink:"/docs/v1.1.0/language/"}},u={},c=[{value:"1. Getting Started",id:"1-getting-started",level:2},{value:"2. Exploring the Data",id:"2-exploring-the-data",level:2},{value:"3. Searching",id:"3-searching",level:2},{value:"3.1 Keyword Search",id:"31-keyword-search",level:3},{value:"3.2 Globs",id:"32-globs",level:3},{value:"3.3 Regular Expressions",id:"33-regular-expressions",level:3},{value:"3.4 Literal Search",id:"34-literal-search",level:3},{value:"3.5 Predicate Search",id:"35-predicate-search",level:3},{value:"3.5.1 Type Dependence",id:"351-type-dependence",level:4},{value:"3.5.2 Grep Predicates",id:"352-grep-predicates",level:4},{value:"3.5.3 Containment",id:"353-containment",level:4},{value:"3.5.4 Comparisons",id:"354-comparisons",level:4},{value:"3.6 Boolean Logic",id:"36-boolean-logic",level:3},{value:"3.6.1 Logical Grouping",id:"361-logical-grouping",level:4},{value:"4. Record Operators",id:"4-record-operators",level:2},{value:"4.1 cut",id:"41-cut",level:3},{value:"4.2 drop",id:"42-drop",level:3},{value:"4.3 fuse",id:"43-fuse",level:3},{value:"4.4 put",id:"44-put",level:3},{value:"4.5 rename",id:"45-rename",level:3},{value:"5. Aggregates",id:"5-aggregates",level:2},{value:"5.1 Output Field Names",id:"51-output-field-names",level:3},{value:"5.2 Grouping",id:"52-grouping",level:3},{value:"5.3 Where Clause",id:"53-where-clause",level:3},{value:"5.4 Aggregate Functions",id:"54-aggregate-functions",level:3},{value:"5.4.1 and",id:"541-and",level:4},{value:"5.4.2 any",id:"542-any",level:4},{value:"5.4.3 avg",id:"543-avg",level:4},{value:"5.4.4 collect",id:"544-collect",level:4},{value:"5.4.5 count",id:"545-count",level:4},{value:"5.4.6 dcount",id:"546-dcount",level:4},{value:"5.4.7 max",id:"547-max",level:4},{value:"5.4.8 min",id:"548-min",level:4},{value:"5.4.9 or",id:"549-or",level:4},{value:"5.4.10 sum",id:"5410-sum",level:4},{value:"5.4.11 union",id:"5411-union",level:4},{value:"5.5 Group-by Examples",id:"55-group-by-examples",level:3},{value:"6. Sorting",id:"6-sorting",level:2},{value:"7. Sequence Filters",id:"7-sequence-filters",level:2},{value:"7.1 head",id:"71-head",level:3},{value:"7.2 tail",id:"72-tail",level:3},{value:"7.3 uniq",id:"73-uniq",level:3},{value:"8. Value Construction",id:"8-value-construction",level:2}],p={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"zed-and-schools-data"},"Zed and Schools Data"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This document provides a beginner's overview of the Zed language\nusing the ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/commands/zq"},"zq command")," and\n",(0,i.kt)("a",{parentName:"p",href:"../../testdata/edu"},"real-world data")," relating to California schools\nand test scores.")),(0,i.kt)("h2",{id:"1-getting-started"},"1. Getting Started"),(0,i.kt)("p",null,"If you want to follow along by running the examples, simply\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/install"},"install zq")," and copy the\ndata files used here into your working directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"curl https://raw.githubusercontent.com/brimdata/zed/main/testdata/edu/schools.zson > schools.zson\ncurl https://raw.githubusercontent.com/brimdata/zed/main/testdata/edu/testscores.zson > testscores.zson\ncurl https://raw.githubusercontent.com/brimdata/zed/main/testdata/edu/webaddrs.zson > webaddrs.zson\n")),(0,i.kt)("p",null,"These files are all encoded in the human-readable ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/formats/zson"},"ZSON format"),"\nso you can easily have a look at them.  ZSON is not optimized for speed but these\nfiles are small enough that the example queries here will all run fast enough."),(0,i.kt)("h2",{id:"2-exploring-the-data"},"2. Exploring the Data"),(0,i.kt)("p",null,"It's always a good idea to get a feel for any new data, which is easy to do\nwith Zed.  Zed's ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/operators/sample"},"sample operator")," is just the ticket ---\n",(0,i.kt)("inlineCode",{parentName:"p"},"sample"),' will select one representative value from each "shape" of data present\nin the input, e.g.,'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'sample | sort this' schools.zson testscores.zson webaddrs.zson\n")),(0,i.kt)("p",null,"displays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{\n    AvgScrMath: null (uint16),\n    AvgScrRead: null (uint16),\n    AvgScrWrite: null (uint16),\n    cname: "Riverside",\n    dname: "Beaumont Unified",\n    sname: "21st Century Learning Institute"\n}\n{\n    School: "\'3R\' Middle",\n    District: "Nevada County Office of Education",\n    City: "Nevada City",\n    County: "Nevada",\n    Zip: "95959",\n    Latitude: null (float64),\n    Longitude: null (float64),\n    Magnet: null (bool),\n    OpenDate: 1995-10-30T00:00:00Z,\n    ClosedDate: 1996-06-28T00:00:00Z,\n    Phone: null (string),\n    StatusType: "Merged",\n    Website: null (string)\n}\n{\n    Website: "abbott.lynwood.edlioschool.com",\n    addr: 151.101.0.80\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"-Z")," option tells ",(0,i.kt)("inlineCode",{parentName:"p"},"zq"),' to "pretty print" the output in\nthe ',(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/formats/zson"},"ZSON")," format.\nFurthermore, you will notice these examples often include a ",(0,i.kt)("inlineCode",{parentName:"p"},"-z")," to indicate\nline-oriented ZSON, which is the default when ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," is writing to standard output.\nYou can omit ",(0,i.kt)("inlineCode",{parentName:"p"},"-z")," when running these commands on the terminal but we include\nthem here for clarity and because all of the examples are tied to automated testing,\nwhich does not utilize a terminal for standard output.")),(0,i.kt)("p",null,"You can also quickly see a list of the leaf-value data types with this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},'zq -Z "sample | over this | by typeof(value) | yield typeof | sort" schools.zson testscores.zson webaddrs.zson\n')),(0,i.kt)("p",null,"which emits"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"<uint16>\n<time>\n<float64>\n<bool>\n<string>\n<ip>\n")),(0,i.kt)("p",null,"Nothing too tricky here.  After a quick review of the shapes and types,\nyou will notice they are just three relatively simple tables, which is no surprise\nsince we obtained the original data from\n",(0,i.kt)("a",{parentName:"p",href:"../../testdata/edu/README.md#creation"},"SQLite database files"),"."),(0,i.kt)("h2",{id:"3-searching"},"3. Searching"),(0,i.kt)("p",null,"Searching with Zed is easy but powerful because it blends together the\nkeyword search patterns of Web or email search with the more precise\npredicate matching patterns of query languages like SQL."),(0,i.kt)("p",null,"With this in mind, you can simply start typing keyword search phrases in Zed\nand they will usually do the right thing."),(0,i.kt)("h3",{id:"31-keyword-search"},"3.1 Keyword Search"),(0,i.kt)("p",null,"With keyword search, you can just type a keyword that you want to look for, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z Ygnacio schools.zson\n")),(0,i.kt)("p",null,"which gives the one matching record:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Valencia (Ygnacio) High (Alternative)",District:"Delano Joint Union High",City:"Delano",County:"Kern",Zip:"93215-1526",Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:2009-08-01T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"Ygnacio Valley Elementary",District:"Mt. Diablo Unified",City:"Concord",County:"Contra Costa",Zip:"94518-2595",Latitude:37.950182,Longitude:-122.0283,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(925) 682-9336",StatusType:"Active",Website:"www.mdusd.org"}\n{School:"Ygnacio Valley High",District:"Mt. Diablo Unified",City:"Concord",County:"Contra Costa",Zip:"94518-2899",Latitude:37.936674,Longitude:-122.02325,Magnet:true,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(925) 685-8414",StatusType:"Active",Website:"www.mdusd.org"}\n')),(0,i.kt)("p",null,'As with keyword search, you can simply concantenate keywords to require both\nof them to match (i.e., a "logical AND" of the two search predicates), e.g.\nwe can whittle down the two records above by adding the keyword ',(0,i.kt)("em",{parentName:"p"},"Delano")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'Ygnacio Delano' schools.zson\n")),(0,i.kt)("p",null,"and we get just the one record that matches:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Valencia (Ygnacio) High (Alternative)",District:"Delano Joint Union High",City:"Delano",County:"Kern",Zip:"93215-1526",Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:2009-08-01T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n')),(0,i.kt)("p",null,"Under the covers, a keyword search translates to Zed's ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/functions/grep"},"grep function"),',\nwhich lets you search specific fields instead of the entire input value, e.g.,\nwe can search for the string "bar" in the ',(0,i.kt)("inlineCode",{parentName:"p"},"City")," field and list all the unique\ncities that match with a ",(0,i.kt)("a",{parentName:"p",href:"#group-by"},"group-by"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f text 'grep(\"bar\", City) | by City | yield City | sort' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"Barstow\nBig Bar\nDiamond Bar\nLong Barn\nSanta Barbara\nSawyers Bar\nSomes Bar\n")),(0,i.kt)("p",null,"In this example, we use the ",(0,i.kt)("a",{parentName:"p",href:"#8-value-construction"},"yield operator")," here to pull\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"City")," field out of the record result and we used ",(0,i.kt)("inlineCode",{parentName:"p"},"-f text"),' to output the\nresults in "text" format instead of ZSON so the strings are printed\nwithout quotes.  The text format is often useful for piping the output to\nother Unix tools that might not expect quotes.'),(0,i.kt)("p",null,"When the keyword you want to search for doesn't fit into the keyword syntax,\ni.e., it has spaces or special characters, you should use a\n",(0,i.kt)("a",{parentName:"p",href:"#literal-search"},"literal string search"),"."),(0,i.kt)("h3",{id:"32-globs"},"3.2 Globs"),(0,i.kt)("p",null,"To find values that may contain arbitrary substrings between or alongside the\ndesired word(s), one or more\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Glob_(programming)"},"glob"),"-style wildcards can be\nused."),(0,i.kt)("p",null,"For example, the following search finds records that contain school names\nthat have some additional text between ",(0,i.kt)("inlineCode",{parentName:"p"},"ACE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Academy"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'ACE*Academy' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"ACE Empower Academy",District:"Santa Clara County Office of Education",City:"San Jose",County:"Santa Clara",Zip:"95116-3423",Latitude:37.348601,Longitude:-121.8446,Magnet:false,OpenDate:2008-08-26T00:00:00Z,ClosedDate:null(time),Phone:"(408) 729-3920",StatusType:"Active",Website:"www.acecharter.org"}\n{School:"ACE Inspire Academy",District:"San Jose Unified",City:"San Jose",County:"Santa Clara",Zip:"95112-6334",Latitude:37.350981,Longitude:-121.87205,Magnet:false,OpenDate:2015-08-03T00:00:00Z,ClosedDate:null(time),Phone:"(408) 295-6008",StatusType:"Active",Website:"www.acecharter.org"}\n')),(0,i.kt)("p",null,"Glob wildcards only have effect when used within ",(0,i.kt)("a",{parentName:"p",href:"#31-keyword-search"},"keywords"),"\nsearches. An asterisk in a ",(0,i.kt)("a",{parentName:"p",href:"#34-literal-search"},"string literal search")," will match\nusing the literal asterisk character embedded in the string."),(0,i.kt)("h3",{id:"33-regular-expressions"},"3.3 Regular Expressions"),(0,i.kt)("p",null,"For pattern matching beyond ",(0,i.kt)("a",{parentName:"p",href:"#glob-wildcards"},"glob wildcards"),",\nregular expressions (regexps) are also\navailable. To use them, simply place a ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," character before and after the\nregexp."),(0,i.kt)("p",null,"For example, since there are many high schools in our sample data, to find\nonly records containing strings that ",(0,i.kt)("em",{parentName:"p"},"begin")," with the word ",(0,i.kt)("inlineCode",{parentName:"p"},"High"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z '/^High /' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"High Desert",District:"Soledad-Agua Dulce Union Eleme",City:"Acton",County:"Los Angeles",Zip:"93510",Latitude:34.490977,Longitude:-118.19646,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:1993-06-30T00:00:00Z,Phone:null(string),StatusType:"Merged",Website:null(string)}\n{School:"High Desert",District:"Acton-Agua Dulce Unified",City:"Acton",County:"Los Angeles",Zip:"93510-1757",Latitude:34.492578,Longitude:-118.19039,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(661) 269-0310",StatusType:"Active",Website:null(string)}\n{School:"High Desert Academy",District:"Eastern Sierra Unified",City:"Benton",County:"Mono",Zip:"93512-0956",Latitude:37.818597,Longitude:-118.47712,Magnet:null(bool),OpenDate:1996-09-03T00:00:00Z,ClosedDate:2012-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:"www.esusd.org"}\n{School:"High Desert Academy of Applied Arts and Sciences",District:"Victor Valley Union High",City:"Victorville",County:"San Bernardino",Zip:"92394",Latitude:34.531144,Longitude:-117.31697,Magnet:null(bool),OpenDate:2004-09-07T00:00:00Z,ClosedDate:2011-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:"www.hdaaas.org"}\n...\n')),(0,i.kt)("p",null,"Further details for regular expressions are available in\nthe ",(0,i.kt)("a",{parentName:"p",href:"#711-regular-expressions"},"Zed language documention"),"."),(0,i.kt)("h3",{id:"34-literal-search"},"3.4 Literal Search"),(0,i.kt)("p",null,"Sometimes you want to search for values that aren't strings, e.g., numbers\nor IP addresses.  Zed can search for any\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/formats/zed#1-primitive-types"},"primitive-type")," value just typing\nthat value like a keyword.   In this case, the search looks for\nboth fields of the value's type for an exact match as well as a substring\nmatch for the value as typed in any strings encountered."),(0,i.kt)("p",null,"For example, searching across both our school and test score data sources for\nthe number ",(0,i.kt)("inlineCode",{parentName:"p"},"596")," matches records that contain numeric fields of this precise value\n(such as from the test scores) and also records that contain string fields\n(such as the ZIP code and phone number fields in the school data), e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z '596' testscores.zson schools.zson\n")),(0,i.kt)("p",null,"finds these records"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{AvgScrMath:591(uint16),AvgScrRead:610(uint16),AvgScrWrite:596(uint16),cname:"Los Angeles",dname:"William S. Hart Union High",sname:"Academy of the Canyons"}\n{AvgScrMath:614(uint16),AvgScrRead:596(uint16),AvgScrWrite:592(uint16),cname:"Alameda",dname:"Pleasanton Unified",sname:"Amador Valley High"}\n{AvgScrMath:620(uint16),AvgScrRead:596(uint16),AvgScrWrite:590(uint16),cname:"Yolo",dname:"Davis Joint Unified",sname:"Davis Senior High"}\n{School:"Achieve Charter School of Paradise Inc.",District:"Paradise Unified",City:"Paradise",County:"Butte",Zip:"95969-3913",Latitude:39.760323,Longitude:-121.62078,Magnet:false,OpenDate:2005-09-12T00:00:00Z,ClosedDate:null(time),Phone:"(530) 872-4100",StatusType:"Active",Website:"www.achievecharter.org"}\n{School:"Alliance Ouchi-O\'Donovan 6-12 Complex",District:"Los Angeles Unified",City:"Los Angeles",County:"Los Angeles",Zip:"90043-2622",Latitude:33.993484,Longitude:-118.32246,Magnet:false,OpenDate:2006-09-05T00:00:00Z,ClosedDate:null(time),Phone:"(323) 596-2290",StatusType:"Active",Website:"http://ouchihs.org"}\n...\n')),(0,i.kt)("p",null,"Literal search also works for string values.  This is useful when the\nstring value to search cannot be represented as a keyword due to embedded\nspaces or special characters."),(0,i.kt)("p",null,"Let's say we've noticed that a couple of the school names in our sample data\ninclude the string ",(0,i.kt)("inlineCode",{parentName:"p"},"Defunct="),". An attempt to enter this as a ",(0,i.kt)("a",{parentName:"p",href:"#31-keyword-search"},"keyword"),"\nsearch causes a parse error, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu fails",dir:"testdata/edu",fails:!0},"zq -z 'Defunct=' *.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"zq: error parsing Zed at column 8:\nDefunct=\n   === ^ ===\n")),(0,i.kt)("p",null,"However, wrapping in quotes to performa a string-literal search\ngives the desired result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z '\"Defunct=\"' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Lincoln Elem \'Defunct=",District:"Modesto City Elementary",City:null(string),County:"Stanislaus",Zip:null(string),Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:1989-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"Lovell Elem \'Defunct=",District:"Cutler-Orosi Joint Unified",City:null(string),County:"Tulare",Zip:null(string),Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:1989-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n')),(0,i.kt)("p",null,"Quoted strings are particularly handy when you're looking for long, specific\nstrings that may have several special characters in them. For example, let's\nsay we're looking for information on the Union Hill Elementary district.\nEntered without quotes, we end up matching far more records than we intended\nsince each space character between words is treated as a ",(0,i.kt)("a",{parentName:"p",href:"#and"},"Boolean ",(0,i.kt)("inlineCode",{parentName:"a"},"and")),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'Union Hill Elementary' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"A. M. Thomas Middle",District:"Lost Hills Union Elementary",City:"Lost Hills",County:"Kern",Zip:"93249-0158",Latitude:35.615269,Longitude:-119.69955,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(661) 797-2626",StatusType:"Active",Website:null(string)}\n{School:"Alview Elementary",District:"Alview-Dairyland Union Elementary",City:"Chowchilla",County:"Madera",Zip:"93610-9225",Latitude:37.050632,Longitude:-120.4734,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(559) 665-2275",StatusType:"Active",Website:null(string)}\n{School:"Anaverde Hills",District:"Westside Union Elementary",City:"Palmdale",County:"Los Angeles",Zip:"93551-5518",Latitude:34.564651,Longitude:-118.18012,Magnet:false,OpenDate:2005-08-15T00:00:00Z,ClosedDate:null(time),Phone:"(661) 575-9923",StatusType:"Active",Website:null(string)}\n{School:"Apple Blossom",District:"Twin Hills Union Elementary",City:"Sebastopol",County:"Sonoma",Zip:"95472-3917",Latitude:38.387396,Longitude:-122.84954,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(707) 823-1041",StatusType:"Active",Website:null(string)}\n...\n')),(0,i.kt)("p",null,"However, wrapping the entire search term in quotes allows us to search for the\ncomplete string, including the spaces, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z '\"Union Hill Elementary\"' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Highland Oaks Elementary",District:"Union Hill Elementary",City:"Grass Valley",County:"Nevada",Zip:"95945",Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1997-09-02T00:00:00Z,ClosedDate:2003-07-02T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"Union Hill 3R Community Day",District:"Union Hill Elementary",City:"Grass Valley",County:"Nevada",Zip:"95945",Latitude:39.229055,Longitude:-121.07127,Magnet:null(bool),OpenDate:2003-08-20T00:00:00Z,ClosedDate:2011-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:"www.uhsd.k12.ca.us"}\n{School:"Union Hill Charter Home",District:"Union Hill Elementary",City:"Grass Valley",County:"Nevada",Zip:"95945-8805",Latitude:39.204457,Longitude:-121.03829,Magnet:false,OpenDate:1995-07-14T00:00:00Z,ClosedDate:2015-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:"www.uhsd.k12.ca.us"}\n{School:"Union Hill Elementary",District:"Union Hill Elementary",City:"Grass Valley",County:"Nevada",Zip:"95945-8805",Latitude:39.204457,Longitude:-121.03829,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(530) 273-8456",StatusType:"Active",Website:"www.uhsd.k12.ca.us"}\n{School:"Union Hill Middle",District:"Union Hill Elementary",City:"Grass Valley",County:"Nevada",Zip:"94945-8805",Latitude:39.205006,Longitude:-121.03778,Magnet:false,OpenDate:2013-08-14T00:00:00Z,ClosedDate:null(time),Phone:"(530) 273-8456",StatusType:"Active",Website:"www.uhsd.k12.ca.us"}\n{School:null(string),District:"Union Hill Elementary",City:"Grass Valley",County:"Nevada",Zip:"95945-8730",Latitude:39.208869,Longitude:-121.03551,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(530) 273-0647",StatusType:"Active",Website:"www.uhsd.k12.ca.us"}\n')),(0,i.kt)("h3",{id:"35-predicate-search"},"3.5 Predicate Search"),(0,i.kt)("p",null,"Search terms can also be include Boolean predicates adhering\nto Zed's ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/#6-expressions"},"expression syntax"),"."),(0,i.kt)("p",null,"In particular, a search result can be narrowed down\nto include only records that contain a\ncertain value in a particular named field. For example, the following search\nwill only match records containing the field called ",(0,i.kt)("inlineCode",{parentName:"p"},"District")," where it is set\nto the precise string value ",(0,i.kt)("inlineCode",{parentName:"p"},"Winton"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'District==\"Winton\"' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Frank Sparkes Elementary",District:"Winton",City:"Winton",County:"Merced",Zip:"95388-0008",Latitude:37.382084,Longitude:-120.61847,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(209) 357-6180",StatusType:"Active",Website:null(string)}\n{School:"Sybil N. Crookham Elementary",District:"Winton",City:"Winton",County:"Merced",Zip:"95388-0130",Latitude:37.389501,Longitude:-120.61636,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(209) 357-6182",StatusType:"Active",Website:null(string)}\n{School:"Winfield Elementary",District:"Winton",City:"Winton",County:"Merced",Zip:"95388",Latitude:37.389121,Longitude:-120.60442,Magnet:false,OpenDate:2007-08-13T00:00:00Z,ClosedDate:null(time),Phone:"(209) 357-6891",StatusType:"Active",Website:null(string)}\n{School:"Winton Middle",District:"Winton",City:"Winton",County:"Merced",Zip:"95388-1477",Latitude:37.379938,Longitude:-120.62263,Magnet:false,OpenDate:1990-07-20T00:00:00Z,ClosedDate:null(time),Phone:"(209) 357-6189",StatusType:"Active",Website:null(string)}\n{School:null(string),District:"Winton",City:"Winton",County:"Merced",Zip:"95388-0008",Latitude:37.389467,Longitude:-120.6147,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(209) 357-6175",StatusType:"Active",Website:"www.winton.k12.ca.us"}\n')),(0,i.kt)("p",null,"Because the right-hand-side value to which we were comparing was a string, it\nwas necessary to wrap it in quotes. If this string were written as a keyword,\nit would have been interpreted as a field name as\nZed ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/#24-implied-field-references"},"field references"),"\nlook like keywords in the context of an expression."),(0,i.kt)("p",null,"For example, to see the records in which the school and district name are the\nsame:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'District==School' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"Adelanto Elementary",District:"Adelanto Elementary",City:"Adelanto",County:"San Bernardino",Zip:"92301-1734",Latitude:34.576166,Longitude:-117.40944,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(760) 246-5892",StatusType:"Active",Website:null(string)}\n{School:"Allensworth Elementary",District:"Allensworth Elementary",City:"Allensworth",County:"Tulare",Zip:"93219-9709",Latitude:35.864487,Longitude:-119.39068,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(661) 849-2401",StatusType:"Active",Website:null(string)}\n{School:"Alta Loma Elementary",District:"Alta Loma Elementary",City:"Alta Loma",County:"San Bernardino",Zip:"91701-5007",Latitude:34.12597,Longitude:-117.59744,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(909) 484-5000",StatusType:"Active",Website:null(string)}\n...\n')),(0,i.kt)("h4",{id:"351-type-dependence"},"3.5.1 Type Dependence"),(0,i.kt)("p",null,"When comparing values to the named fields,\nthe value must be comparable to the ",(0,i.kt)("em",{parentName:"p"},"data type")," of the field."),(0,i.kt)("p",null,'For instance, the "Zip" field in the schools data is a ',(0,i.kt)("inlineCode",{parentName:"p"},"string")," rather than\na number because of the extended ZIP+4 format that includes a hyphen and four\nadditional digits and hence could not be represented in a numeric type, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'cut Zip' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{Zip:"95959"}\n{Zip:"94607-1404"}\n{Zip:"92395-3360"}\n...\n')),(0,i.kt)("p",null,"Because Zed does not coerce strings to numbers in expressions,\nthe predicate ",(0,i.kt)("inlineCode",{parentName:"p"},"Zip==95959")," would ",(0,i.kt)("em",{parentName:"p"},"not"),"\nmatch the top record shown, since Zed recognizes the bare value ",(0,i.kt)("inlineCode",{parentName:"p"},"95959")," as a\nnumber before comparing it to all the fields named ",(0,i.kt)("inlineCode",{parentName:"p"},"Zip"),".\nHowever, ",(0,i.kt)("inlineCode",{parentName:"p"},'Zip=="95959"')," ",(0,i.kt)("em",{parentName:"p"},"would")," match, since the quotes cause Zed\nto treat the value as a string."),(0,i.kt)("p",null,"When confronted with messy data like this, you can usually cleaned it up\nto achieve the intent of your searches.  For example, the dash suffix\nof the ZIP codes could be dropped, the string converted to an integer, then\ninteger comparisons performed, i.e.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'cut Zip | int64(Zip[0:5])==94607' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{Zip:"94607-1404"}\n...\n')),(0,i.kt)("h4",{id:"352-grep-predicates"},"3.5.2 Grep Predicates"),(0,i.kt)("p",null,"When comparing a named field to a literal string, the quoted value is treated as\nan ",(0,i.kt)("em",{parentName:"p"},"exact")," match."),(0,i.kt)("p",null,"For example, let's say we know there are several school names that start with\n",(0,i.kt)("inlineCode",{parentName:"p"},"Luther")," but only a couple district names that do. Because ",(0,i.kt)("inlineCode",{parentName:"p"},"Luther")," only appears\nas a ",(0,i.kt)("em",{parentName:"p"},"substring")," of the district names in our sample data, the following example\nproduces no output, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'District==\"Luther\"' schools.zson\n")),(0,i.kt)("p",null,"produces an empty output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"")),(0,i.kt)("p",null,"To perform string searches inside of nested values, we can utilize the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/functions/grep"},"grep function")," with\na ",(0,i.kt)("a",{parentName:"p",href:"#32-globs"},"glob"),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'grep(Luther*, District)' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"Luther Burbank Elementary",District:"Luther Burbank",City:"San Jose",County:"Santa Clara",Zip:"95128-1931",Latitude:37.323556,Longitude:-121.9267,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(408) 295-1814",StatusType:"Active",Website:null(string)}\n{School:null(string),District:"Luther Burbank",City:"San Jose",County:"Santa Clara",Zip:"95128-1931",Latitude:37.323556,Longitude:-121.9267,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(408) 295-2450",StatusType:"Active",Website:"www.lbsd.k12.ca.us"}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#regular-expressions"},"Regular expressions")," can also be used with ",(0,i.kt)("inlineCode",{parentName:"p"},"grep"),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'grep(/^Sunset (Ranch|Ridge) Elementary/, School)' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Sunset Ranch Elementary",District:"Rocklin Unified",City:"Rocklin",County:"Placer",Zip:"95765-5441",Latitude:38.826425,Longitude:-121.2864,Magnet:false,OpenDate:2010-08-17T00:00:00Z,ClosedDate:null(time),Phone:"(916) 624-2048",StatusType:"Active",Website:"www.rocklin.k12.ca.us"}\n{School:"Sunset Ridge Elementary",District:"Pacifica",City:"Pacifica",County:"San Mateo",Zip:"94044-2029",Latitude:37.653836,Longitude:-122.47919,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(650) 738-6687",StatusType:"Active",Website:null(string)}\n')),(0,i.kt)("h4",{id:"353-containment"},"3.5.3 Containment"),(0,i.kt)("p",null,"Rather than testing for strict equality or pattern matches, you may want to\ndetermine if a value is among the many possible elements of a complex field.\nThis is performed with ",(0,i.kt)("inlineCode",{parentName:"p"},"in"),"."),(0,i.kt)("p",null,"Since our sample data doesn't contain complex fields, we'll make one by\nusing the ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/aggregates/union"},(0,i.kt)("inlineCode",{parentName:"a"},"union"))," aggregate function to\ncreate a ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/formats/zson#343-set-value"},(0,i.kt)("inlineCode",{parentName:"a"},"set")),"-typed\nfield called ",(0,i.kt)("inlineCode",{parentName:"p"},"Schools")," that contains all unique school names per district. From\nthese we'll find each set that contains a school named ",(0,i.kt)("inlineCode",{parentName:"p"},"Lincoln Elementary"),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'Schools:=union(School) by District | \"Lincoln Elementary\" in Schools | sort this' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    District: "Tulare City",\n    Schools: |[\n        "Alpine Vista",\n        "Mulcahy Middle",\n        "Tulare Support",\n        "Live Oak Middle",\n        "Los Tules Middle",\n        "Maple Elementary",\n        "Garden Elementary",\n        "Wilson Elementary",\n        "Cypress Elementary",\n        "Lincoln Elementary",\n        "Heritage Elementary",\n        "Pleasant Elementary",\n        "Cherry Avenue Middle",\n        "Roosevelt Elementary",\n        "Frank Kohn Elementary",\n        "Mission Valley Elementary",\n        "Tulare City Community Day"\n    ]|\n}\n...\n')),(0,i.kt)("h4",{id:"354-comparisons"},"3.5.4 Comparisons"),(0,i.kt)("p",null,"In addition to testing for equality via ",(0,i.kt)("inlineCode",{parentName:"p"},"==")," and testing containment via\n",(0,i.kt)("inlineCode",{parentName:"p"},"in"),", the other common methods of comparison ",(0,i.kt)("inlineCode",{parentName:"p"},"!="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"p"},">"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<="),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},">=")," are also available."),(0,i.kt)("p",null,"For example, the following search finds the schools that reported the highest\nmath test scores,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'AvgScrMath > 690' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{AvgScrMath:698(uint16),AvgScrRead:639(uint16),AvgScrWrite:664(uint16),cname:"Santa Clara",dname:"Fremont Union High",sname:"Lynbrook High"}\n{AvgScrMath:699(uint16),AvgScrRead:653(uint16),AvgScrWrite:671(uint16),cname:"Alameda",dname:"Fremont Unified",sname:"Mission San Jose High"}\n{AvgScrMath:691(uint16),AvgScrRead:638(uint16),AvgScrWrite:657(uint16),cname:"Santa Clara",dname:"Fremont Union High",sname:"Monta Vista High"}\n')),(0,i.kt)("p",null,"The same approach can be used to compare characters in ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"-type values,\nsuch as this search that finds school names at the end of the alphabet, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'School > \"Z\"' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"Zamora Elementary",District:"Woodland Joint Unified",City:"Woodland",County:"Yolo",Zip:"95695-5137",Latitude:38.658609,Longitude:-121.79355,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(530) 666-3641",StatusType:"Active",Website:null(string)}\n{School:"Zamorano Elementary",District:"San Diego Unified",City:"San Diego",County:"San Diego",Zip:"92139-2989",Latitude:32.680338,Longitude:-117.03864,Magnet:true,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(619) 430-1400",StatusType:"Active",Website:"http://new.sandi.net/schools/zamorano"}\n{School:"Zane (Catherine L.) Junior High",District:"Eureka City High",City:"Eureka",County:"Humboldt",Zip:"95501-3140",Latitude:40.788118,Longitude:-124.14903,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:1998-06-30T00:00:00Z,Phone:null(string),StatusType:"Merged",Website:null(string)}\n...\n')),(0,i.kt)("h3",{id:"36-boolean-logic"},"3.6 Boolean Logic"),(0,i.kt)("p",null,"Search terms can be combined with Boolean logic as detailed in\nthe ",(0,i.kt)("a",{parentName:"p",href:"#73-boolean-logic"},"Zed language documentation"),"."),(0,i.kt)("p",null,"In particular, search terms separated by blank space implies\nBoolean ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," between the concatenated terms."),(0,i.kt)("p",null,"Let's say we're earching for information about academies\nthat are flagged as being in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pending"),' status.  We can simply concatenate\nthe predicate for "Pending" and the keyword search for ',(0,i.kt)("inlineCode",{parentName:"p"},"academy"),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'StatusType==\"Pending\" academy' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"Equitas Academy 4",District:"Los Angeles Unified",City:"Los Angeles",County:"Los Angeles",Zip:"90015-2412",Latitude:34.044837,Longitude:-118.27844,Magnet:false,OpenDate:2017-09-01T00:00:00Z,ClosedDate:null(time),Phone:"(213) 201-0440",StatusType:"Pending",Website:"http://equitasacademy.org"}\n{School:"Pinnacle Academy Charter - Independent Study",District:"South Monterey County Joint Union High",City:"King City",County:"Monterey",Zip:"93930-3311",Latitude:36.208934,Longitude:-121.13286,Magnet:false,OpenDate:2016-08-08T00:00:00Z,ClosedDate:null(time),Phone:"(831) 385-4661",StatusType:"Pending",Website:"www.smcjuhsd.org"}\n{School:"Rocketship Futuro Academy",District:"SBE - Rocketship Futuro Academy",City:"Concord",County:"Contra Costa",Zip:"94521-1522",Latitude:37.965658,Longitude:-121.96106,Magnet:false,OpenDate:2016-08-15T00:00:00Z,ClosedDate:null(time),Phone:"(301) 789-5469",StatusType:"Pending",Website:"www.rsed.org"}\n{School:"Sherman Thomas STEM Academy",District:"Madera Unified",City:"Madera",County:"Madera",Zip:"93638",Latitude:36.982843,Longitude:-120.06665,Magnet:false,OpenDate:2017-08-09T00:00:00Z,ClosedDate:null(time),Phone:"(559) 674-1192",StatusType:"Pending",Website:"www.stcs.k12.ca.us"}\n{School:null(string),District:"SBE - Rocketship Futuro Academy",City:"Concord",County:"Contra Costa",Zip:"94521-1522",Latitude:37.965658,Longitude:-121.96106,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(301) 789-5469",StatusType:"Pending",Website:"www.rsed.org"}\n')),(0,i.kt)("p",null,"Of course, the logical AND may also be explicit and the above query\ncan be written explicitly as"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'StatusType=="Pending" and academy\n')),(0,i.kt)("p",null,"You can also combine predicates in a logical OR.\nLet'a revisit two of our previous example searches that each only\nreturned a couple records, searching now with ",(0,i.kt)("inlineCode",{parentName:"p"},"or")," to see them all at once,\ne.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z '\"Defunct=\" or ACE*Academy' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"ACE Empower Academy",District:"Santa Clara County Office of Education",City:"San Jose",County:"Santa Clara",Zip:"95116-3423",Latitude:37.348601,Longitude:-121.8446,Magnet:false,OpenDate:2008-08-26T00:00:00Z,ClosedDate:null(time),Phone:"(408) 729-3920",StatusType:"Active",Website:"www.acecharter.org"}\n{School:"ACE Inspire Academy",District:"San Jose Unified",City:"San Jose",County:"Santa Clara",Zip:"95112-6334",Latitude:37.350981,Longitude:-121.87205,Magnet:false,OpenDate:2015-08-03T00:00:00Z,ClosedDate:null(time),Phone:"(408) 295-6008",StatusType:"Active",Website:"www.acecharter.org"}\n{School:"Lincoln Elem \'Defunct=",District:"Modesto City Elementary",City:null(string),County:"Stanislaus",Zip:null(string),Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:1989-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"Lovell Elem \'Defunct=",District:"Cutler-Orosi Joint Unified",City:null(string),County:"Tulare",Zip:null(string),Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:1989-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n')),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"not")," to invert the matching logic in the term that comes to the right of\nit in your search."),(0,i.kt)("p",null,"For example, to find schools in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dixon Unified")," district ",(0,i.kt)("em",{parentName:"p"},"other than"),"\nelementary schools, we invert the logic of a search term:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'not elementary District==\"Dixon Unified\"' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"C. A. Jacobs Intermediate",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620-3209",Latitude:38.446472,Longitude:-121.83631,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(707) 693-6350",StatusType:"Active",Website:"www.dixonusd.org"}\n{School:"Dixon Adult",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620",Latitude:38.444818,Longitude:-121.82287,Magnet:null(bool),OpenDate:1996-09-09T00:00:00Z,ClosedDate:2016-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"Dixon Community Day",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620",Latitude:38.44755,Longitude:-121.82001,Magnet:false,OpenDate:2003-08-23T00:00:00Z,ClosedDate:null(time),Phone:"(707) 693-6340",StatusType:"Active",Website:"www.dixonusd.org"}\n{School:"Dixon High",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620-9301",Latitude:38.436088,Longitude:-121.81672,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(707) 693-6330",StatusType:"Active",Website:null(string)}\n{School:"Dixon Montessori Charter",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620-2702",Latitude:38.447984,Longitude:-121.83186,Magnet:false,OpenDate:2010-08-11T00:00:00Z,ClosedDate:null(time),Phone:"(707) 678-8953",StatusType:"Active",Website:"www.dixonmontessori.org"}\n{School:"Dixon Unified Alter. Educ.",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620",Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1993-08-26T00:00:00Z,ClosedDate:1994-06-30T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"Maine Prairie High (Continuation)",District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620-3019",Latitude:38.447549,Longitude:-121.81986,Magnet:false,OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(707) 693-6340",StatusType:"Active",Website:null(string)}\n{School:null(string),District:"Dixon Unified",City:"Dixon",County:"Solano",Zip:"95620-3447",Latitude:38.44468,Longitude:-121.82249,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(707) 693-6300",StatusType:"Active",Website:"www.dixonusd.org"}\n')),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," can also be used as alternative shorthand for ",(0,i.kt)("inlineCode",{parentName:"p"},"not"),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'! elementary District=="Dixon Unified"\n')),(0,i.kt)("h4",{id:"361-logical-grouping"},"3.6.1 Logical Grouping"),(0,i.kt)("p",null,"Unless wrapped in parentheses, a search is evaluated in ",(0,i.kt)("em",{parentName:"p"},"left-to-right order"),".\nTerms wrapped in parentheses will be evaluated ",(0,i.kt)("em",{parentName:"p"},"first"),", overriding the default\nleft-to-right evaluation."),(0,i.kt)("p",null,"For example, we've noticed there are some test score records that have ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"\nvalues for all three test scores:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'AvgScrMath==null AvgScrRead==null AvgScrWrite==null' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{AvgScrMath:null(uint16),AvgScrRead:null(uint16),AvgScrWrite:null(uint16),cname:"Riverside",dname:"Beaumont Unified",sname:"21st Century Learning Institute"}\n{AvgScrMath:null(uint16),AvgScrRead:null(uint16),AvgScrWrite:null(uint16),cname:"Los Angeles",dname:"ABC Unified",sname:"ABC Secondary (Alternative)"}\n...\n')),(0,i.kt)("p",null,"We can easily filter these out by negating the search for these records, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'not (AvgScrMath==null AvgScrRead==null AvgScrWrite==null)' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{AvgScrMath:371(uint16),AvgScrRead:376(uint16),AvgScrWrite:368(uint16),cname:"Los Angeles",dname:"Los Angeles Unified",sname:"APEX Academy"}\n{AvgScrMath:367(uint16),AvgScrRead:359(uint16),AvgScrWrite:369(uint16),cname:"Alameda",dname:"Oakland Unified",sname:"ARISE High"}\n{AvgScrMath:491(uint16),AvgScrRead:489(uint16),AvgScrWrite:484(uint16),cname:"Santa Clara",dname:"San Jose Unified",sname:"Abraham Lincoln High"}\n...\n')),(0,i.kt)("p",null,"Parentheses can also be nested, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'grep(*High*, sname) and (not (AvgScrMath==null AvgScrRead==null AvgScrWrite==null) and dname==\"San Francisco Unified\")' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{AvgScrMath:504(uint16),AvgScrRead:467(uint16),AvgScrWrite:467(uint16),cname:"San Francisco",dname:"San Francisco Unified",sname:"Balboa High"}\n{AvgScrMath:480(uint16),AvgScrRead:443(uint16),AvgScrWrite:431(uint16),cname:"San Francisco",dname:"San Francisco Unified",sname:"Burton (Phillip and Sala) Academic High"}\n{AvgScrMath:413(uint16),AvgScrRead:410(uint16),AvgScrWrite:395(uint16),cname:"San Francisco",dname:"San Francisco Unified",sname:"City Arts and Tech High"}\n...\n')),(0,i.kt)("p",null,"Except when writing the most common searches that leverage only the implicit\n",(0,i.kt)("inlineCode",{parentName:"p"},"and"),", it's generally good practice to use parentheses even when not strictly\nnecessary, just to make sure your queries clearly communicate their intended\nlogic."),(0,i.kt)("h2",{id:"4-record-operators"},"4. Record Operators"),(0,i.kt)("p",null,"As with the data sets explored here, a very typical use case for Zed is\nto operate over structured logs or events that are all represented as Zed records.\nWhile Zed queries may operate over any sequence of values, the following operators\nare designed specifically to work on sequences of records:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/cut"},"cut")," - extract subsets of record fields into new records"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/drop"},"drop")," - drop fields from record values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/fuse"},"fuse")," - coerce all input values into a merged type"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/put"},"put")," - add or modify fields of records"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/rename"},"rename")," - change the name of record fields")),(0,i.kt)("h3",{id:"41-cut"},"4.1 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/cut"},"cut")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cut")," produces output records from input records containing only\nthe specified named fields."),(0,i.kt)("p",null,"This example returns only the name and opening date from our school records:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'cut School,OpenDate' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    School: "\'3R\' Middle",\n    OpenDate: 1995-10-30T00:00:00Z\n}\n{\n    School: "100 Black Men of the Bay Area Community",\n    OpenDate: 2012-08-06T00:00:00Z\n}\n...\n')),(0,i.kt)("p",null,"As long as some of the named fields are present, they are returned while absent\nfields are ",(0,i.kt)("inlineCode",{parentName:"p"},'error("missing")'),". For instance, the following\nquery is run against all three of our data sources and returns values from our\nschool data that includes fields for both ",(0,i.kt)("inlineCode",{parentName:"p"},"School")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Website"),", values from\nour web address data that have the ",(0,i.kt)("inlineCode",{parentName:"p"},"Website")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"addr")," fields, and the\nmissing value from the test score data since it has none of these fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'yosemiteuhsd | cut School,Website,addr' *.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:null(string),Website:"www.yosemiteuhsd.com",addr:error("missing")}\n{School:error("missing"),Website:"www.yosemiteuhsd.com",addr:104.253.209.210}\n')),(0,i.kt)("p",null,"Here, we return only the ",(0,i.kt)("inlineCode",{parentName:"p"},"sname")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dname")," fields of the test scores while also\nrenaming the fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'cut School:=sname,District:=dname' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{School:"21st Century Learning Institute",District:"Beaumont Unified"}\n{School:"ABC Secondary (Alternative)",District:"ABC Unified"}\n...\n')),(0,i.kt)("h3",{id:"42-drop"},"4.2 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/drop"},"drop")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"drop")," produces output records from input records with the indicated\nfields dropped from the output."),(0,i.kt)("p",null,"This example return all the fields ",(0,i.kt)("em",{parentName:"p"},"other than")," the score values in our test score data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'drop AvgScrMath,AvgScrRead,AvgScrWrite' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{cname:"Riverside",dname:"Beaumont Unified",sname:"21st Century Learning Institute"}\n{cname:"Los Angeles",dname:"ABC Unified",sname:"ABC Secondary (Alternative)"}\n...\n')),(0,i.kt)("h3",{id:"43-fuse"},"4.3 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/fuse"},"fuse")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fuse")," produces output records from input records where the outputs\nall have a uniform type consisting of a fusion of the input types.\nNote that ",(0,i.kt)("inlineCode",{parentName:"p"},"fuse")," operates in two passes: the first pass computes the\noutput type and the second pass tranforms the records.  Thus, all input\nmust be read before any output is produced.  If the input does not\nfit in memory, it is spilled to temporary storage."),(0,i.kt)("p",null,"Let's say you'd started with table-formatted output of all records in our data\nthat reference the town of Geyserville, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'Geyserville' *.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"School                            District            City        County Zip        Latitude  Longitude  Magnet OpenDate             ClosedDate           Phone          StatusType Website\nBuena Vista High                  Geyserville Unified Geyserville Sonoma 95441-9670 38.722005 -122.89123 F      1980-07-01T00:00:00Z                      (707) 857-3592 Active     -\nGeyserville Community Day         Geyserville Unified Geyserville Sonoma 95441      38.722005 -122.89123 -      2004-09-01T00:00:00Z 2010-06-30T00:00:00Z -              Closed     -\nGeyserville Educational Park High Geyserville Unified Geyserville Sonoma 95441      38.722005 -122.89123 -      1980-07-01T00:00:00Z 2014-06-30T00:00:00Z -              Closed     -\nGeyserville Elementary            Geyserville Unified Geyserville Sonoma 95441-0108 38.705895 -122.90296 F      1980-07-01T00:00:00Z                      (707) 857-3410 Active     www.gusd.com\nGeyserville Middle                Geyserville Unified Geyserville Sonoma 95441      38.722005 -122.89123 -      1980-07-01T00:00:00Z 2014-06-30T00:00:00Z -              Closed     -\nGeyserville New Tech Academy      Geyserville Unified Geyserville Sonoma 95441-9670 38.72015  -122.88534 F      2014-07-01T00:00:00Z                      (707) 857-3592 Active     www.gusd.com\n-                                 Geyserville Unified Geyserville Sonoma 95441-9670 38.722005 -122.89123 -                                                (707) 857-3592 Active     www.gusd.com\nAvgScrMath AvgScrRead AvgScrWrite cname  dname               sname\n-          -          -           Sonoma Geyserville Unified Geyserville New Tech Academy\n-          -          -           Sonoma Geyserville Unified -\n")),(0,i.kt)("p",null,"School records were output first, so the preceding header row describes the\nnames of those fields. Later on, two test score records were also output, so\na header row describing its fields was also printed. This presentation\naccurately conveys the heterogeneous nature of the data, but changing schemas\nmid-stream is not allowed in formats such as CSV or other downstream tooling\nsuch as SQL. Indeed, ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," halts its output in this case, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu fails",dir:"testdata/edu",fails:!0},"zq -f csv 'Geyserville' *.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"School,District,City,County,Zip,Latitude,Longitude,Magnet,OpenDate,ClosedDate,Phone,StatusType,Website\nBuena Vista High,Geyserville Unified,Geyserville,Sonoma,95441-9670,38.722005,-122.89123,false,1980-07-01T00:00:00Z,,(707) 857-3592,Active,\nGeyserville Community Day,Geyserville Unified,Geyserville,Sonoma,95441,38.722005,-122.89123,,2004-09-01T00:00:00Z,2010-06-30T00:00:00Z,,Closed,\nGeyserville Educational Park High,Geyserville Unified,Geyserville,Sonoma,95441,38.722005,-122.89123,,1980-07-01T00:00:00Z,2014-06-30T00:00:00Z,,Closed,\nGeyserville Elementary,Geyserville Unified,Geyserville,Sonoma,95441-0108,38.705895,-122.90296,false,1980-07-01T00:00:00Z,,(707) 857-3410,Active,www.gusd.com\nGeyserville Middle,Geyserville Unified,Geyserville,Sonoma,95441,38.722005,-122.89123,,1980-07-01T00:00:00Z,2014-06-30T00:00:00Z,,Closed,\nGeyserville New Tech Academy,Geyserville Unified,Geyserville,Sonoma,95441-9670,38.72015,-122.88534,false,2014-07-01T00:00:00Z,,(707) 857-3592,Active,www.gusd.com\n,Geyserville Unified,Geyserville,Sonoma,95441-9670,38.722005,-122.89123,,,,(707) 857-3592,Active,www.gusd.com\nCSV output requires uniform records but multiple types encountered (consider 'fuse')\n")),(0,i.kt)("p",null,"By using ",(0,i.kt)("inlineCode",{parentName:"p"},"fuse"),", the unified schema of field names and types across all records\nis assembled in a first pass through the data stream, which enables the\npresentation of the results under a single, wider header row with no further\ninterruptions between the subsequent data rows, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f csv 'Geyserville | fuse' *.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"School,District,City,County,Zip,Latitude,Longitude,Magnet,OpenDate,ClosedDate,Phone,StatusType,Website,AvgScrMath,AvgScrRead,AvgScrWrite,cname,dname,sname\nBuena Vista High,Geyserville Unified,Geyserville,Sonoma,95441-9670,38.722005,-122.89123,false,1980-07-01T00:00:00Z,,(707) 857-3592,Active,,,,,,,\nGeyserville Community Day,Geyserville Unified,Geyserville,Sonoma,95441,38.722005,-122.89123,,2004-09-01T00:00:00Z,2010-06-30T00:00:00Z,,Closed,,,,,,,\nGeyserville Educational Park High,Geyserville Unified,Geyserville,Sonoma,95441,38.722005,-122.89123,,1980-07-01T00:00:00Z,2014-06-30T00:00:00Z,,Closed,,,,,,,\nGeyserville Elementary,Geyserville Unified,Geyserville,Sonoma,95441-0108,38.705895,-122.90296,false,1980-07-01T00:00:00Z,,(707) 857-3410,Active,www.gusd.com,,,,,,\nGeyserville Middle,Geyserville Unified,Geyserville,Sonoma,95441,38.722005,-122.89123,,1980-07-01T00:00:00Z,2014-06-30T00:00:00Z,,Closed,,,,,,,\nGeyserville New Tech Academy,Geyserville Unified,Geyserville,Sonoma,95441-9670,38.72015,-122.88534,false,2014-07-01T00:00:00Z,,(707) 857-3592,Active,www.gusd.com,,,,,,\n,Geyserville Unified,Geyserville,Sonoma,95441-9670,38.722005,-122.89123,,,,(707) 857-3592,Active,www.gusd.com,,,,,,\n,,,,,,,,,,,,,,,,Sonoma,Geyserville Unified,Geyserville New Tech Academy\n,,,,,,,,,,,,,,,,Sonoma,Geyserville Unified,\n")),(0,i.kt)("p",null,"In addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," format, the ",(0,i.kt)("inlineCode",{parentName:"p"},"parquet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"zeek")," formats\nalso benefit from fused records."),(0,i.kt)("h3",{id:"44-put"},"4.4 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/drop"},"put")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"put")," produces output records from input records and either mutates or\nadds fields indicated by the expressions."),(0,i.kt)("p",null,"If multiple fields are written by ",(0,i.kt)("inlineCode",{parentName:"p"},"put"),",  the new field values are computed first\nand then they are all written simultaneously.  As a result, a computed value\ncannot be referenced in another expression.  If you need to re-use a computed result,\nthis can be done by chaining multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"put")," operators.\nFor example, this will not work"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"put N:=len(somelist), isbig:=N>10\n")),(0,i.kt)("p",null,"but it could be written instead as"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"put N:=len(somelist) | put isbig:=N>10\n")),(0,i.kt)("p",null,"For example,\nto add a field to our test score records representing the computed average of the math,\nreading, and writing scores for each school that reported them, we could say:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'AvgScrMath!=null | put AvgAll:=(AvgScrMath+AvgScrRead+AvgScrWrite)/3.0' testscores.zson\n")),(0,i.kt)("p",null,"which produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    AvgScrMath: 371 (uint16),\n    AvgScrRead: 376 (uint16),\n    AvgScrWrite: 368 (uint16),\n    cname: "Los Angeles",\n    dname: "Los Angeles Unified",\n    sname: "APEX Academy",\n    AvgAll: 371.6666666666667\n}\n...\n')),(0,i.kt)("p",null,"We can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"put")," to create derived tables and display them in tabular\nform using ",(0,i.kt)("inlineCode",{parentName:"p"},"-f table"),", e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'AvgScrMath != null | put combined_scores:=AvgScrMath+AvgScrRead+AvgScrWrite | cut sname,combined_scores,AvgScrMath,AvgScrRead,AvgScrWrite | head 5' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"sname                       combined_scores AvgScrMath AvgScrRead AvgScrWrite\nAPEX Academy                1115            371        376        368\nARISE High                  1095            367        359        369\nAbraham Lincoln High        1464            491        489        484\nAbraham Lincoln Senior High 1319            462        432        425\nAcademia Avance Charter     1148            386        380        382\n")),(0,i.kt)("p",null,"As noted above the ",(0,i.kt)("inlineCode",{parentName:"p"},"put")," keyword is entirely optional. Here we omit\nit and create a new field to hold the lowercase representation of\nthe school ",(0,i.kt)("inlineCode",{parentName:"p"},"District")," field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'cut District | lower_district:=lower(District)' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    District: "Nevada County Office of Education",\n    lower_district: "nevada county office of education"\n}\n...\n')),(0,i.kt)("h3",{id:"45-rename"},"4.5 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/rename"},"rename")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rename")," produces output records from input records where field mays are\nchange.  Note that a field's name can only be renamed as it exists inside\nof the record and cannot be moved between sub-records in a nested value."),(0,i.kt)("p",null,"The rename steps are applied left-to-right."),(0,i.kt)("p",null,"Here is a simple example that renames some fields in our test score data\nto match the field names from our school data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'rename School:=sname,District:=dname,City:=cname' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    AvgScrMath: null (uint16),\n    AvgScrRead: null (uint16),\n    AvgScrWrite: null (uint16),\n    City: "Riverside",\n    District: "Beaumont Unified",\n    School: "21st Century Learning Institute"\n}\n...\n')),(0,i.kt)("p",null,"As mentioned above, a field can only be renamed within its own record. In\nother words, a field cannot move between nested levels when being renamed."),(0,i.kt)("p",null,"For example, consider this sample input data ",(0,i.kt)("inlineCode",{parentName:"p"},"nested.zson"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-input",metastring:"nested.zson","nested.zson":!0},'{\n    outer: {\n        inner: "MyValue"\n    }\n}\n')),(0,i.kt)("p",null,"The field ",(0,i.kt)("inlineCode",{parentName:"p"},"inner")," can be renamed within that nested record, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"zq -Z 'rename outer.renamed:=outer.inner' nested.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{\n    outer: {\n        renamed: "MyValue"\n    }\n}\n')),(0,i.kt)("p",null,"However, an attempt to rename it to a top-level field will fail, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"fails",fails:!0},"zq -Z 'rename toplevel:=outer.inner' nested.zson\n")),(0,i.kt)("p",null,"produces this compile-time error message and the query is not run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"cannot rename outer.inner to toplevel\n")),(0,i.kt)("p",null,"This goal could instead be achieved by combining ",(0,i.kt)("a",{parentName:"p",href:"#put"},(0,i.kt)("inlineCode",{parentName:"a"},"put"))," and ",(0,i.kt)("a",{parentName:"p",href:"#drop"},(0,i.kt)("inlineCode",{parentName:"a"},"drop")),",\ne.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"zq -Z 'put toplevel:=outer.inner | drop outer.inner' nested.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{\n    toplevel: "MyValue"\n}\n')),(0,i.kt)("h2",{id:"5-aggregates"},"5. Aggregates"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/operators/summarize"},"summarize operator"),"\nperforms zero or more aggregations with zero or more group-by expressions.\nEach aggregation is performed by an\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/aggregates/"},"aggregate function"),"\nthat operates on batches of records to carry out a running computation over\nthe values they contain.  The ",(0,i.kt)("inlineCode",{parentName:"p"},"summarize")," keyword is optional as the operato\ncan be ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/#26-implied-operators"},"inferred from context"),"."),(0,i.kt)("p",null,"As with SQL, multiple aggregate functions may be invoked at the same time.\nFor example, to simultaneously calculate the minimum, maximum, and average of\nthe math test scores:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'min(AvgScrMath),max(AvgScrMath),avg(AvgScrMath)' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"min max avg\n289 699 484.99019042123484\n")),(0,i.kt)("h3",{id:"51-output-field-names"},"5.1 Output Field Names"),(0,i.kt)("p",null,"The output of an aggregation is a sequence of records that form a table,\nand the field names are specified in the assignments of the aggregate\nfunctions and the group-by assignemnts.  When an expression is given\nwithout a field name, a name is derived from the expression.  If a name\ncannot be derived, then a compile-time error is reported and the query\ndoes not run."),(0,i.kt)("p",null,"As just shown, by default the result returned is placed in a field with the\nsame name as the aggregate function. You may instead use ",(0,i.kt)("inlineCode",{parentName:"p"},":=")," to specify an\nexplicit name for the generated field, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'lowest:=min(AvgScrMath),highest:=max(AvgScrMath),typical:=avg(AvgScrMath)' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"lowest highest typical\n289    699     484.99019042123484\n")),(0,i.kt)("h3",{id:"52-grouping"},"5.2 Grouping"),(0,i.kt)("p",null,"All aggregate functions may be invoked with one or more\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/operators/summarize"},"group-by expressions"),", which forms one\nor more group-by keys.  Each unique group-by set defines input values\nupon which each aggregate function instance operates.\nIf no group-by expression is provided, the aggregate function\noperates over all values in the input stream and a single record is the result."),(0,i.kt)("h3",{id:"53-where-clause"},"5.3 Where Clause"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," clause may also be added to filter the values on which an aggregate\nfunction will operate.\nFor example,\nthis query calculates average math test scores for the cities of Los Angeles\nand San Francisco:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},'zq -Z \'LA_Math:=avg(AvgScrMath) where cname=="Los Angeles", SF_Math:=avg(AvgScrMath) where cname=="San Francisco"\' testscores.zson\n')),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{\n    LA_Math: 456.27341772151897,\n    SF_Math: 485.3636363636364\n}\n")),(0,i.kt)("h3",{id:"54-aggregate-functions"},"5.4 Aggregate Functions"),(0,i.kt)("p",null,"This section depicts examples of variou\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/#aggregate-functions"},"aggregate functions"),'\noperating over thes "schools data set".'),(0,i.kt)("h4",{id:"541-and"},"5.4.1 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/and"},"and")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," function accumulates a Boolean truth value based on the logical AND\nof all of its input."),(0,i.kt)("p",null,"Many of the school records in our sample data include websites, but many do\nnot. The following query shows the cities in which all schools have a website. e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'all_schools_have_website:=and(Website!=null) by City | sort City' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    City: "Acampo",\n    all_schools_have_website: false\n}\n{\n    City: "Acton",\n    all_schools_have_website: false\n}\n{\n    City: "Acton, CA",\n    all_schools_have_website: true\n}\n...\n')),(0,i.kt)("h4",{id:"542-any"},"5.4.2 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/any"},"any")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," function produces one value from all of its input, chosen in\nan undefined manner."),(0,i.kt)("p",null,"This query gives the name of one of the schools in our sample data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'any(School)' schools.zson\n")),(0,i.kt)("p",null,"For small inputs that fit in memory, this will typically be the first such\nfield in the stream, but in general you should not rely upon this.  In this\ncase, the output is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{any:\"'3R' Middle\"}\n")),(0,i.kt)("h4",{id:"543-avg"},"5.4.3 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/avg"},"avg")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"avg")," function computes an arithmetic mean over all of all of its input."),(0,i.kt)("p",null,"This query calculates the average of the math test scores:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'avg(AvgScrMath)' testscores.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"avg\n484.99019042123484\n")),(0,i.kt)("h4",{id:"544-collect"},"5.4.4 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/collect"},"collect")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"collect")," function accumulates all of its input into an array."),(0,i.kt)("p",null,"For schools in Fresno county that include websites, the following query\nconstructs an ordered list per city of their websites along with a parallel\nlist of which school each website represents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'County==\"Fresno\" Website!=null | Websites:=collect(Website),Schools:=collect(School) by City | sort City' schools.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    City: "Auberry",\n    Websites: [\n        "www.sierra.k12.ca.us",\n        "www.sierra.k12.ca.us",\n        "www.pineridge.k12.ca.us",\n        "www.pineridge.k12.ca.us"\n    ],\n    Schools: [\n        "Auberry Elementary",\n        "Balch Camp Elementary",\n        "Pine Ridge Elementary"\n    ]\n}\n{\n    City: "Big Creek",\n    Websites: [\n        "www.bigcreekschool.com",\n        "www.bigcreekschool.com"\n    ],\n    Schools: [\n        "Big Creek Elementary"\n    ]\n}\n...\n')),(0,i.kt)("h4",{id:"545-count"},"5.4.5 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/count"},"count")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," function produces a count of all of its input values."),(0,i.kt)("p",null,"This query counts the number of records in each of our example data sources:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'count()' schools.zson\nzq -z 'count()' testscores.zson\nzq -z 'count()' webaddrs.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{count:17686(uint64)}\n{count:2331(uint64)}\n{count:2223(uint64)}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Website")," field is known to be in our school and website address data\nsources, but not in the test score data. To confirm this, we can count across\nall data sources and specify the named field, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'count(Website)' *.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{count:19909(uint64)}\n")),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"17686 + 2223 = 19909"),", the count result is what we expected."),(0,i.kt)("h4",{id:"546-dcount"},"5.4.6 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/dcount"},"dcount")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dcount")," function produces a distinct count of all of its input values,\ni.e., the number of unique values in its input."),(0,i.kt)("p",null,"For large inputs, this value  is an approximation of the actual value.\nThe approcimation error is described in detail in the code and research linked\nfrom the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/axiomhq/hyperloglog"},"HyperLogLog repository"),"."),(0,i.kt)("p",null,"This query generates an approcimate count the number of unique school names\nin our sample data set:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'dcount(School)' schools.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{\n    dcount: 13804 (uint64)\n}\n")),(0,i.kt)("p",null,"To see the precise value, which may take longer to execute, this query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'count() by School | count()' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{\n    count: 13876 (uint64)\n}\n")),(0,i.kt)("p",null,"Here we saw the approximation was off by 0.3%."),(0,i.kt)("h4",{id:"547-max"},"5.4.7 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/max"},"max")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"max")," function computes the maximum numeric value over all of its input."),(0,i.kt)("p",null,"To see the highest reported math test score, this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'max(AvgScrMath)' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"max\n699\n")),(0,i.kt)("h4",{id:"548-min"},"5.4.8 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/min"},"min")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"min")," function computes the minimum numeric value over all of its input."),(0,i.kt)("p",null,"To see the lowest reported math test score, this query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'min(AvgScrMath)' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"min\n289\n")),(0,i.kt)("h4",{id:"549-or"},"5.4.9 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/or"},"or")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"or")," function accumulates a Boolean truth value based on the logical OR\nof all of its input."),(0,i.kt)("p",null,"Many of the school records in our sample data include websites, but many do\nnot. The following query shows the cities for which at least one school has\na listed website:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'has_at_least_one_school_website:=or(Website!=null) by City | sort City' schools.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    City: "Acampo",\n    has_at_least_one_school_website: true\n}\n{\n    City: "Acton",\n    has_at_least_one_school_website: true\n}\n{\n    City: "Acton, CA",\n    has_at_least_one_school_website: true\n}\n{\n    City: "Adelanto",\n    has_at_least_one_school_website: true\n}\n{\n    City: "Adin",\n    has_at_least_one_school_website: false\n}\n...\n')),(0,i.kt)("h4",{id:"5410-sum"},"5.4.10 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/sum"},"sum")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sum")," function computes the minimum numeric value over all of its input."),(0,i.kt)("p",null,"This query calculates the total of all the math, reading, and writing test scores\nacross all schools:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'AllMath:=sum(AvgScrMath),AllRead:=sum(AvgScrRead),AllWrite:=sum(AvgScrWrite)' testscores.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{\n    AllMath: 840488 (uint64),\n    AllRead: 832260 (uint64),\n    AllWrite: 819632 (uint64)\n}\n")),(0,i.kt)("h4",{id:"5411-union"},"5.4.11 ",(0,i.kt)("a",{parentName:"h4",href:"/docs/v1.1.0/language/aggregates/union"},"union")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," function computes a set union over all of this input."),(0,i.kt)("p",null,"For schools in Fresno county that include websites, the following query\nconstructs a set per city of all the unique websites for the schools in that\ncity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'County==\"Fresno\" Website!=null | Websites:=union(Website) by City | sort City' schools.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{\n    City: "Auberry",\n    Websites: |[\n        "www.sierra.k12.ca.us",\n        "www.pineridge.k12.ca.us"\n    ]|\n}\n{\n    City: "Big Creek",\n    Websites: |[\n        "www.bigcreekschool.com"\n    ]|\n}\n...\n')),(0,i.kt)("h3",{id:"55-group-by-examples"},"5.5 Group-by Examples"),(0,i.kt)("p",null,"As mentioned above,\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"summarize")," operator may include group-by expressions\nthat partitions the input sequence into groups that\nare processed independently from on another."),(0,i.kt)("p",null,"The output order of values from each grouped aggregation is undefined.\nTo ensure a deterministic order,\na ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/operators/sort"},(0,i.kt)("inlineCode",{parentName:"a"},"sort")," operator"),"\nmay be used downstream of the aggregation."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"In many of the examples, you will see a ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," tacked onto the end of the\ncomputation.  This ensures a deterministic order and reliable testing since\nall of these examples are subject to automated testing.")),(0,i.kt)("p",null,"The simplest group-by example summarizes the unique values of the named field(s),\nwhich requires no aggregate function"),(0,i.kt)("p",null,"For example, to see the different categories of status for the schools\nin our example data, this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'by StatusType | sort' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{StatusType:"Active"}\n{StatusType:"Closed"}\n{StatusType:"Merged"}\n{StatusType:"Pending"}\n')),(0,i.kt)("p",null,"If you work a lot at the UNIX/Linux shell, you might have sought to accomplish\nthe same via a familiar idiom: ",(0,i.kt)("inlineCode",{parentName:"p"},"sort | uniq"),".  This works in Zed, but the ",(0,i.kt)("inlineCode",{parentName:"p"},"by"),"\nshorthand is preferable, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'cut StatusType | sort | uniq' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{StatusType:"Active"}\n{StatusType:"Closed"}\n{StatusType:"Merged"}\n{StatusType:"Pending"}\n')),(0,i.kt)("p",null,"When specifying multiple comma-separated field names, a group is formed for each\nunique combination of values found in those fields.  To see the average reading\ntest scores and school count for each county/district pairing, this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'avg(AvgScrRead),count() by cname,dname | sort -r count' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},"cname           dname                                              avg                count\nLos Angeles     Los Angeles Unified                                416.83522727272725 202\nSan Diego       San Diego Unified                                  472                44\nAlameda         Oakland Unified                                    414.95238095238096 27\nSan Francisco   San Francisco Unified                              454.36842105263156 26\n...\n")),(0,i.kt)("p",null,"Instead of a simple field name, any of the comma-separated group-by elements\ncan be any ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/#expressions"},"Zed expression"),", which may\nappear in the form of a field assignment ",(0,i.kt)("inlineCode",{parentName:"p"},"field:=expr")),(0,i.kt)("p",null,"To see a count of how many school names of a particular character length\nappear in our example data, this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'count() by Name_Length:=len(School) | sort -r' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},"Name_Length count\n89          2\n85          2\n84          2\n83          1\n...\n")),(0,i.kt)("p",null,"The fields referenced in a ",(0,i.kt)("inlineCode",{parentName:"p"},"by")," grouping may or may not be present, or may be\ninconsistently present, in the given input records, in which case, the group-by\naggregation still proceeds but embeds any error conditions in the result,\nWhen a value is missing for a specified fiedl, it will appear as ",(0,i.kt)("inlineCode",{parentName:"p"},'error("missing")'),"."),(0,i.kt)("p",null,"For instance, if we'd made an typographical error in our\n",(0,i.kt)("a",{parentName:"p",href:"#example-2"},"prior example")," when attempting to reference the ",(0,i.kt)("inlineCode",{parentName:"p"},"dname")," field,\nthe misspelled column would appear as embedded missing errors, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'avg(AvgScrRead),count() by cname,dnmae | sort -r count' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},"cname           dnmae avg                count\nLos Angeles     -     450.83037974683543 469\nSan Diego       -     496.74789915966386 168\nSan Bernardino  -     465.11764705882354 117\nRiverside       -     463.8170731707317  110\nOrange          -     510.91011235955057 107\n...\n")),(0,i.kt)("h2",{id:"6-sorting"},"6. Sorting"),(0,i.kt)("p",null,"Zed provides a convenient way to sort data using the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/operators/sort"},"sort operator"),".\nAll values in Zed have a well-defined sort order, even complex values\nand values of different data types, so you can easily sort heterogenous\nsequences of values."),(0,i.kt)("p",null,"This query sorts our test score records by average reading score:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'sort AvgScrRead' testscores.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{AvgScrMath:352(uint16),AvgScrRead:308(uint16),AvgScrWrite:327(uint16),cname:"Alameda",dname:"Oakland Unified",sname:"Oakland International High"}\n{AvgScrMath:289(uint16),AvgScrRead:314(uint16),AvgScrWrite:312(uint16),cname:"Contra Costa",dname:"West Contra Costa Unified",sname:"Gompers (Samuel) Continuation"}\n{AvgScrMath:450(uint16),AvgScrRead:321(uint16),AvgScrWrite:318(uint16),cname:"San Francisco",dname:"San Francisco Unified",sname:"S.F. International High"}\n{AvgScrMath:314(uint16),AvgScrRead:324(uint16),AvgScrWrite:321(uint16),cname:"Los Angeles",dname:"Norwalk-La Mirada Unified",sname:"El Camino High (Continuation)"}\n{AvgScrMath:307(uint16),AvgScrRead:324(uint16),AvgScrWrite:328(uint16),cname:"Contra Costa",dname:"West Contra Costa Unified",sname:"North Campus Continuation"}\n...\n')),(0,i.kt)("p",null,"Now we'll sort the test score records first by average reading score and then\nby average math score. Note how this changed the order of the bottom two\nrecords in the result, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'sort AvgScrRead,AvgScrMath' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{AvgScrMath:352(uint16),AvgScrRead:308(uint16),AvgScrWrite:327(uint16),cname:"Alameda",dname:"Oakland Unified",sname:"Oakland International High"}\n{AvgScrMath:289(uint16),AvgScrRead:314(uint16),AvgScrWrite:312(uint16),cname:"Contra Costa",dname:"West Contra Costa Unified",sname:"Gompers (Samuel) Continuation"}\n{AvgScrMath:450(uint16),AvgScrRead:321(uint16),AvgScrWrite:318(uint16),cname:"San Francisco",dname:"San Francisco Unified",sname:"S.F. International High"}\n{AvgScrMath:307(uint16),AvgScrRead:324(uint16),AvgScrWrite:328(uint16),cname:"Contra Costa",dname:"West Contra Costa Unified",sname:"North Campus Continuation"}\n{AvgScrMath:314(uint16),AvgScrRead:324(uint16),AvgScrWrite:321(uint16),cname:"Los Angeles",dname:"Norwalk-La Mirada Unified",sname:"El Camino High (Continuation)"}\n...\n')),(0,i.kt)("p",null,"Here we'll find the counties with the most schools by using the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/aggregates/count"},(0,i.kt)("inlineCode",{parentName:"a"},"count()"))," aggregate function and piping its\noutput to a ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," in reverse order. Note that even though we didn't list a\nfield name as an explicit argument, the ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," operator did what we wanted\nbecause it found a field of the ",(0,i.kt)("inlineCode",{parentName:"p"},"uint64")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/#data-types"},"data type"),",\ne.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'count() by County | sort -r' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{County:"Los Angeles",count:3636(uint64)}\n{County:"San Diego",count:1139(uint64)}\n{County:"Orange",count:886(uint64)}\n...\n')),(0,i.kt)("p",null,"Next we'll count the number of unique websites mentioned in our school\nrecords. Since we know some of the records don't include a website, we'll\ndeliberately put the null values at the front of the list so we can see how\nmany there are, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'count() by Website | sort -nulls first Website' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{Website:null(string),count:10722(uint64)}\n{Website:"acornstooakscharter.org",count:1(uint64)}\n{Website:"atlascharter.org",count:1(uint64)}\n{Website:"bizweb.lightspeed.net/~leagles",count:1(uint64)}\n...\n')),(0,i.kt)("h2",{id:"7-sequence-filters"},"7. Sequence Filters"),(0,i.kt)("p",null,"Several Zed operators manipulate a sequence of values based on the order\nin which they appear in the input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/head"},"head")," - copy leading values of input sequence"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/tail"},"tail")," - copy trailing values of input sequence"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/v1.1.0/language/operators/uniq"},"uniq")," - deduplicate adjacent values")),(0,i.kt)("h3",{id:"71-head"},"7.1 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/head"},"head")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," operator takes an integer argument ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," and copies the first N values\nof its input to its output."),(0,i.kt)("p",null,"For example, this query selects the first school record:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'head' schools.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{\n    School: "\'3R\' Middle",\n    District: "Nevada County Office of Education",\n    City: "Nevada City",\n    County: "Nevada",\n    Zip: "95959",\n    Latitude: null (float64),\n    Longitude: null (float64),\n    Magnet: null (bool),\n    OpenDate: 1995-10-30T00:00:00Z,\n    ClosedDate: 1996-06-28T00:00:00Z,\n    Phone: null (string),\n    StatusType: "Merged",\n    Website: null (string)\n}\n')),(0,i.kt)("p",null,"To see the first five school records in Los Angeles county, this query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'County==\"Los Angeles\" | head 5' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:"ABC Adult",District:"ABC Unified",City:"Cerritos",County:"Los Angeles",Zip:"90703-2801",Latitude:33.878924,Longitude:-118.07128,Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:null(time),Phone:"(562) 229-7960",StatusType:"Active",Website:"www.abcadultschool.com"}\n{School:"ABC Charter Middle",District:"Los Angeles Unified",City:"Los Angeles",County:"Los Angeles",Zip:"90017",Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:2008-09-03T00:00:00Z,ClosedDate:2009-06-10T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:"www.abcsf.us"}\n{School:"ABC Evening High School",District:"ABC Unified",City:"Cerritos",County:"Los Angeles",Zip:"90701",Latitude:null(float64),Longitude:null(float64),Magnet:null(bool),OpenDate:1980-07-01T00:00:00Z,ClosedDate:1994-11-23T00:00:00Z,Phone:null(string),StatusType:"Closed",Website:null(string)}\n{School:"ABC Secondary (Alternative)",District:"ABC Unified",City:"Cerritos",County:"Los Angeles",Zip:"90703-2301",Latitude:33.881547,Longitude:-118.04635,Magnet:false,OpenDate:1991-09-05T00:00:00Z,ClosedDate:null(time),Phone:"(562) 229-7768",StatusType:"Active",Website:null(string)}\n{School:"APEX Academy",District:"Los Angeles Unified",City:"Los Angeles",County:"Los Angeles",Zip:"90028-8526",Latitude:34.052234,Longitude:-118.24368,Magnet:false,OpenDate:2008-09-03T00:00:00Z,ClosedDate:null(time),Phone:"(323) 817-6550",StatusType:"Active",Website:null(string)}\n')),(0,i.kt)("h3",{id:"72-tail"},"7.2 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/tail"},"tail")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," operator takes an integer argument ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," and copies the last N values\nof its input to its output."),(0,i.kt)("p",null,"For example, this query selects the last school record:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'tail' schools.zson\n")),(0,i.kt)("p",null,"and produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{\n    School: null (string),\n    District: "Wheatland Union High",\n    City: "Wheatland",\n    County: "Yuba",\n    Zip: "95692-9798",\n    Latitude: 38.998968,\n    Longitude: -121.45497,\n    Magnet: null (bool),\n    OpenDate: null (time),\n    ClosedDate: null (time),\n    Phone: "(530) 633-3100",\n    StatusType: "Active",\n    Website: "www.wheatlandhigh.org"\n}\n')),(0,i.kt)("p",null,"To see the last five school records in Los Angeles county, this query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'County==\"Los Angeles\" | tail 5' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{School:null(string),District:"Wiseburn Unified",City:"Hawthorne",County:"Los Angeles",Zip:"90250-6462",Latitude:33.920462,Longitude:-118.37839,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(310) 643-3025",StatusType:"Active",Website:"www.wiseburn.k12.ca.us"}\n{School:null(string),District:"SBE - Anahuacalmecac International University Preparatory of North America",City:"Los Angeles",County:"Los Angeles",Zip:"90032-1942",Latitude:34.085085,Longitude:-118.18154,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(323) 352-3148",StatusType:"Active",Website:"www.dignidad.org"}\n{School:null(string),District:"SBE - Academia Avance Charter",City:"Highland Park",County:"Los Angeles",Zip:"90042-4005",Latitude:34.107313,Longitude:-118.19811,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(323) 230-7270",StatusType:"Active",Website:"www.academiaavance.com"}\n{School:null(string),District:"SBE - Prepa Tec Los Angeles High",City:"Huntington Park",County:"Los Angeles",Zip:"90255-4138",Latitude:33.983752,Longitude:-118.22344,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(323) 800-2741",StatusType:"Active",Website:"www.prepatechighschool.org"}\n{School:null(string),District:"California Advancing Pathways for Students in Los Angeles County ROC/P",City:"Bellflower",County:"Los Angeles",Zip:"90706",Latitude:33.882509,Longitude:-118.13442,Magnet:null(bool),OpenDate:null(time),ClosedDate:null(time),Phone:"(562) 866-9011",StatusType:"Active",Website:"www.CalAPS.org"}\n')),(0,i.kt)("h3",{id:"73-uniq"},"7.3 ",(0,i.kt)("a",{parentName:"h3",href:"/docs/v1.1.0/language/operators/uniq"},"uniq")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"uniq")," operator copies input values that are different from the previous\ninput to the output."),(0,i.kt)("p",null,"Let's say you'd been looking at the contents of just the ",(0,i.kt)("inlineCode",{parentName:"p"},"District")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"County")," fields in the order they appear in the school data, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'cut District,County' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{District:"Nevada County Office of Education",County:"Nevada"}\n{District:"Oakland Unified",County:"Alameda"}\n{District:"Victor Elementary",County:"San Bernardino"}\n{District:"Novato Unified",County:"Marin"}\n{District:"Beaumont Unified",County:"Riverside"}\n{District:"Nevada County Office of Education",County:"Nevada"}\n{District:"Nevada County Office of Education",County:"Nevada"}\n{District:"San Bernardino City Unified",County:"San Bernardino"}\n{District:"San Bernardino City Unified",County:"San Bernardino"}\n{District:"Ojai Unified",County:"Ventura"}\n...\n')),(0,i.kt)("p",null,"To eliminate the adjacent lines that share the same field/value pairs,\nthis query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -z 'cut District,County | uniq' schools.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output",metastring:"head",head:!0},'{District:"Nevada County Office of Education",County:"Nevada"}\n{District:"Oakland Unified",County:"Alameda"}\n{District:"Victor Elementary",County:"San Bernardino"}\n{District:"Novato Unified",County:"Marin"}\n{District:"Beaumont Unified",County:"Riverside"}\n{District:"Nevada County Office of Education",County:"Nevada"}\n{District:"San Bernardino City Unified",County:"San Bernardino"}\n{District:"Ojai Unified",County:"Ventura"}\n...\n')),(0,i.kt)("h2",{id:"8-value-construction"},"8. Value Construction"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/language/operators/yield"},"yield operator")," creates one or more output\nvalues for each input value based on the one or more expressions provided\nas arguments to yield."),(0,i.kt)("p",null,"This example produce two simpler records for every school record listing\nthe average math score with the school name and the county name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -Z 'AvgScrMath!=null | yield {school:sname,avg:AvgScrMath}, {county:cname,zvg:AvgScrMath}' testscores.zson\n")),(0,i.kt)("p",null,"which produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",4:!0,className:"language-mdtest-output",metastring:"head 4",head:!0},'{\n    school: "APEX Academy",\n    avg: 371 (uint16)\n}\n{\n    county: "Los Angeles",\n    zvg: 371 (uint16)\n}\n{\n    school: "ARISE High",\n    avg: 367 (uint16)\n}\n{\n    county: "Alameda",\n    zvg: 367 (uint16)\n}\n...\n')),(0,i.kt)("p",null,"In earlier example, we used ",(0,i.kt)("inlineCode",{parentName:"p"},"put")," to create a table using this query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'AvgScrMath != null | put combined_scores:=AvgScrMath+AvgScrRead+AvgScrWrite | cut sname,combined_scores,AvgScrMath,AvgScrRead,AvgScrWrite | head 5' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"sname                       combined_scores AvgScrMath AvgScrRead AvgScrWrite\nAPEX Academy                1115            371        376        368\nARISE High                  1095            367        359        369\nAbraham Lincoln High        1464            491        489        484\nAbraham Lincoln Senior High 1319            462        432        425\nAcademia Avance Charter     1148            386        380        382\n")),(0,i.kt)("p",null,"The same result can be achieved by yielding a record literal,\nsometimes with a more intuitive  structure, e.g.,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command",metastring:"dir=testdata/edu",dir:"testdata/edu"},"zq -f table 'AvgScrMath != null | yield  {sname,combined_scores:AvgScrMath+AvgScrRead+AvgScrWrite,AvgScrMath,AvgScrRead,AvgScrWrite} | head 5' testscores.zson\n")),(0,i.kt)("p",null,"produces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"sname                       combined_scores AvgScrMath AvgScrRead AvgScrWrite\nAPEX Academy                1115            371        376        368\nARISE High                  1095            367        359        369\nAbraham Lincoln High        1464            491        489        484\nAbraham Lincoln Senior High 1319            462        432        425\nAcademia Avance Charter     1148            386        380        382\n")))}m.isMDXComponent=!0}}]);