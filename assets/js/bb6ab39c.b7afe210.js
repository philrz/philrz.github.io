"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[4012],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=p(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||i;return n?r.createElement(d,s(s({ref:t},l),{},{components:n})):r.createElement(d,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2624:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],a={sidebar_position:5,sidebar_label:"Compression"},c="ZNG Compression Types",p={unversionedId:"formats/compression",id:"version-v1.1.0/formats/compression",title:"ZNG Compression Types",description:"This document specifies values for the `` byte of a",source:"@site/versioned_docs/version-v1.1.0/formats/compression.md",sourceDirName:"formats",slug:"/formats/compression",permalink:"/docs/v1.1.0/formats/compression",editUrl:"https://github.com/brimdata/zed/edit/main/docs/versioned_docs/version-v1.1.0/formats/compression.md",tags:[],version:"v1.1.0",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Compression"},sidebar:"tutorialSidebar",previous:{title:"ZJSON",permalink:"/docs/v1.1.0/formats/zjson"},next:{title:"API",permalink:"/docs/v1.1.0/lake/api"}},l={},u=[],m={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"zng-compression-types"},"ZNG Compression Types"),(0,i.kt)("p",null,"This document specifies values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<format>")," byte of a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/v1.1.0/formats/zng#2-the-zng-format"},"ZNG compressed value message block"),"\nand the corresponding algorithms for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<compressed paylod>")," byte sequence."),(0,i.kt)("p",null,"As new compression algorithms are specified, they will be documented\nhere without any need to change the ZNG specification."),(0,i.kt)("p",null,"Of the 256 possible values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<format>")," byte, only type ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," is currently\ndefined and specifies that ",(0,i.kt)("inlineCode",{parentName:"p"},"<compressed payload>")," contains an\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lz4/lz4/blob/master/doc/lz4_Block_format.md"},"LZ4 block"),"."))}f.isMDXComponent=!0}}]);