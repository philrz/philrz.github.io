"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[3556],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},u=Object.keys(e);for(a=0;a<u.length;a++)n=u[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(a=0;a<u.length;a++)n=u[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,u=e.originalType,l=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),p=i(n),f=r,m=p["".concat(l,".").concat(f)]||p[f]||s[f]||u;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var u=n.length,o=new Array(u);o[0]=p;var g={};for(var l in t)hasOwnProperty.call(t,l)&&(g[l]=t[l]);g.originalType=e,g.mdxType="string"==typeof e?e:r,o[1]=g;for(var i=2;i<u;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5670:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return g},metadata:function(){return i},toc:function(){return s}});var a=n(7462),r=n(3366),u=(n(7294),n(3905)),o=["components"],g={},l="Aggregate Functions",i={unversionedId:"language/aggregates/README",id:"language/aggregates/README",title:"Aggregate Functions",description:"---",source:"@site/docs/language/aggregates/README.md",sourceDirName:"language/aggregates",slug:"/language/aggregates/",permalink:"/docs/next/language/aggregates/",editUrl:"https://github.com/brimdata/zed/tree/current/language/aggregates/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"upper",permalink:"/docs/next/language/functions/upper"},next:{title:"and",permalink:"/docs/next/language/aggregates/and"}},c={},s=[],p={toc:s};function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,u.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"aggregate-functions"},"Aggregate Functions"),(0,u.kt)("hr",null),(0,u.kt)("p",null,"Aggregate functions appear in either summarization\nor expression context and produce an aggregate value for a sequence of inputs values."),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/and"},"and")," - logical AND of input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/any"},"any")," - select an arbitrary value from its input"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/avg"},"avg")," - average value"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/collect"},"collect")," - aggregate values into array"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/count"},"count")," - count input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/dcount"},"dcount")," - count distinct input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/fuse"},"fuse")," - compute a fused type of input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/max"},"max")," - maximum value of input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/min"},"min")," - minimum value of input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/or"},"or")," - logical OR of input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/sum"},"sum")," - sum of input values"),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/next/language/aggregates/union"},"union")," - set union of input values")))}f.isMDXComponent=!0}}]);